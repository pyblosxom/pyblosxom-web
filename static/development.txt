Development HOWTO
#nocomments yes
<h2>Table of Contents</h2>
<ol>
  <li><a href="#summary">Summary</a>
  <li><a href="#howtocontribute">How to contribute</a>
  <li><a href="#contributors">Contributors</a>
  <li><a href="#svn">Subversion</a>
  <li><a href="#coding">Coding style guide</a>
  <li><a href="#release">Release instructions</a>
</ol>

<hr noshade>

<a name="summary"><h2>Summary</h2></a>
<p>
  This page covers how to contribute to PyBlosxom development, what our 
  coding conventions (or should be), our mission, lists a non-comprehensive
  list of contributors, and then ends with a short blurb that will eventually
  be replaced with the processes we use to do things.
</p>
<p>
  If you plan on contributing to PyBlosxom, please read this guide in its 
  entirety.
</p>
<p>
  Having said that, this guide is a draft and can change at any time--we 
  update it as necessary.
</p>

<a name="howtocontribute"><h2>How to contribute</h2></a>
<p>
  Some folks want to become part of the development.  Other folks just want
  to send us a patch that fixes something that bugged them.  We appreciate
  both groups of folks and ...  well, we'll take whatever we can get.
</p>
<p>
  If you want to send us a patch, send it to the pyblosxom-devel mailing
  list.  Make sure it's clear what the patch is fixing and why you fixed
  it that way.  Please note any issues there might be and how much testing
  it went through.  Details on the pyblosxom-devel mailing list are on
  the <a href="/blog/static/contact">contact page</a>.
</p>
<p>
  All contributions are appreciated even if they aren't directly used.
  Sometimes the patch will start a conversation that might end up in a
  different fix.
</p>
<p>
  If you want to become a PyBlosxom developer we ask that you join the
  pyblosxom-devel mailing list, tell us your intentions and what your
  mission is, and then the conversation will go from there.
</p>
<p>
  If you want to contribute but have no coding skills--that's ok!  There's
  all kinds of other ways people can contribute: fixing/editing/adding
  documentation, finding bugs, contributing tutorials, helping folks who
  are new to PyBlosxom come up to speed, ...
</p>
<p>
  PyBlosxom has a sophisticated callback framework allowing for plugins to
  modify existing PyBlosxom behavior.  Many problems can be solved by
  writing a plugin rather than adding more code to the PyBlosxom core.
</p>

<a name="contributors"><h2>Contributors</h2></a>
<p>
  Note from Will: I don't have a list of contributors.  If you've contributed
  to PyBlosxom but don't see your name here (or if you want your name modified
  or even removed), let us know on the pyblosxom-devel mailing list.
</p>
<p>
  This list is in no particular order:
</p>
<p>
  Wari, Blake, Ted, Will, Bill, Robert, LionKimbro, Limdou, Steven, David,
  and Matej.
</p>

<a name="svn"><h2>Subversion</h2></a>
<p>
  Our code is in a Subversion repository on SourceForge.
</p>
<p>
  <a href="http://pyblosxom.svn.sourceforge.net/viewcvs.cgi/pyblosxom/">Browse
  Subversion Repository</a> through your web-browser.
</p>
<p>
  For anonymous read-only access to PyBlosxom trunk code do:
</p>
<ol>
  <li><code>svn co https://pyblosxom.svn.sourceforge.net/svnroot/pyblosxom/trunk/pyblosxom/ pyblosxom</code>
</ol>
<p>
  For anonymous read-only access to PyBlosxom contributed plugins code do:
</p>
<ol>
  <li><code>svn co https://pyblosxom.svn.sourceforge.net/svnroot/pyblosxom/trunk/contrib/ contrib</code>
</ol>
<p>
  If you are a registered PyBlosxom developer with Subversion access, you can check out
  the code using the above methods.  When you go to commit things, use the form:
</p>
<ol>
  <li><code>svn commit --username <i>your-username</i> <i>files...</i></code>
</ol>
<p>
  <b>Notes about checkin comments:</b> PLEASE provide comprehensive checkin comments
  that describe what you did, why you did it, any known ramifications of what you did
  to users/developers, related bug numbers, and any other notes.  We use the checkin 
  comments to figure out the CHANGELOG for releases and also to tell users what changes 
  they have to make to their installation when they upgrade.
</p>

<a name="coding"><h2>Coding Style Guide</h2></a>
<p>
  This document describes PyBlosxom coding conventions and development 
  processes.
</p>

<h3>Tabstops and spacing</h3>
<p>
  Indentation is done in multiples of 4.  All spacing shall be done with 
  spaces--no tabs.  Indent when you need to per Python syntax.
</p>

<h3>Maximum line length</h3>
<p>
  Try not to jam everything into one line.
</p>

<h3>Naming</h3>
<p>
  File, module, and package names are all lowercase with no punctuation 
  except underscores:
</p>
<ul>
  <li>cache.py</li>
  <li>pyblosxom.py</li>
  <li>base.py</li>
  <li>__init__.py</li>
</ul>
<p>
  Constants are all uppercase with _ between words:
</p>
<ul>
  <li>BIGNUM</li>
  <li>VAR_REGEXP</li>
</ul>
<p>
  Classnames are mixed case starting with an uppercase letter:
</p>
<ul>
  <li>Entry</li>
  <li>Request</li>
  <li>BlosxomRenderer</li>
</ul>
<p>
  Methods are mixed case with the first letter being lowercased:
</p>
<ul>
  <li>runCallback</li>
  <li>initialize</li>
</ul>
<p>
  Functions and variables are all lowercase with underscores:
</p>
<ul>
  <li>blosxom_handler</li>
  <li>var2</li>
</ul>
<p>
  Private functions and variables start with one underscores and consist
  solely of lowercase letters and underscores:
</p>
<ul>
  <li>_internal_cache</li>
  <li>_internal_wrap</li>
</ul>

<h3>Comments</h3>
<p>
  There are three mortal sins regarding comments:
</p>
<ol>
  <li>code with no comments<br />
  Punishable by early bedtime--unless your code is so unbelievably good that it 
  reads like English.  Even then it should be commented.

  <li>comments that are poorly written<br />
  Comments should be written in English and should be either well-formed 
  sentences or well-formed phrases.  They should be informative--not 
  reduntant.  They should be poetic--revel in your commenting.

  <li>comments should not contradict the code<br />
  This usually happens when you change the code but forget to change the 
  comment.  Always check comments around code you're editing and 
  adjust them accordingly.
</ol>

<h3>Docstrings</h3>
<p>
  All modules, classes, functions, and methods should have doc strings.  We 
  run an out of line documentation generater against these doc strings and 
  thus they become part of the online html documentation of the code.  They 
  help us--they make it easier to look things up and to understand what the 
  code does.  Docstrings should be terse, informative, and beneficial.  They 
  should answer the questions:
</p>
<ol>
  <li>What is this?
  <li>How do I use it?
  <li>What does it take in as input and return as output?
</ol>
<p>
  Docstrings are denoted by the use of """ around the docstring. Anything 
  else is just a regular comment or string. Docstrings should be 
  sentences--not phrases.
</p>
<p>
  Docstrings should be written in Epytext 
  (<a href="http://epydoc.sourceforge.net/">http://epydoc.sourceforge.net</a>) 
  which is a simple markup that has some characteristics found in Javadoc. We 
  generate our API documentation from the docstrings and having it in the 
  right format makes prevents someone from going in and fixing it later.
</p>
<p>
  Docstrings for functions and methods should denote the types and 
  descriptions of any arguments passed in and any return values.
</p>
<p>
  Examples of docstrings:
</p>
<pre>
   def what_ext(extensions, filepath):
       """
       Takes in a filepath and a list of extensions and tries them all until
       it finds the first extension that works.

       @param extensions: the list of extensions to test
       @type  extensions: list of strings

       @param filepath: the complete file path (minus the extension) to test
       @type  filepath: string

       @return: the extension that was successful or None
       @rtype: string
       """
       for ext in extensions:
           if os.path.isfile(filepath + '.' + ext):
               return ext
       return None
</pre>
<pre>
   def is_year(s):
       """
       Checks s to see if it's likely to be a year or not.  In order to be
       considered to be a year, it must pass the following criteria:

        1. four digits
        2. first two digits are either 19 or 20.

       @param s: the string to check for "year-hood"
       @type  s: string

       @return: 1 if s is likely to be a year or 0 if it is not
       @rtype: boolean
       """
       if not s: return 0

       if len(s) == 4 and s.isdigit() and (s.startswith("19") or s.startswith("20")):
           return 1
       return 0
</pre>

<h3>Tests</h3>
<p>
  Tests go in the <code>tests/</code> directory.  From PyBlosxom 1.4 on,
  write tests for new functionality.
</p>

<h3>Documentation</h3>
<p>
  The PyBlosxom manual is in the <code>docs/</code> directory.  Documentation
  is in <a href="http://docutils.sourceforge.net/rst.html">restructured text</a>
  format.
</p>

<a name="release"><h2>Release Instructions</h2></a>
<p>
  First, the checklist:
</p>
<ul>
  <li>make sure everything is checked in and there are no outstanding issues
  <li>make sure MANIFEST.in is correct
  <li>build the tar ball:
<pre>
python setup.py sdist
</pre>
  <ul>
    <li>run the tar ball through Cheesecake:
<pre>
cheesecake_index --verbose -p pyblosxom/pyblosxom-1.4tar.gz -s ./tmp \
   &gt; pybl_1.4.log
</pre>
    <li>run a test install
  </ul>
  <li>run tests:
<pre>
nosetests --verbose --include unit
nosetests --verbose --include functional
</pre>
  <li>make sure the API docs build correctly:
<pre>
/usr/bin/epydoc \
   --html \
   -o "./api/" \
   --name "Pyblosxom (1.4)" \
   --url "http://pyblosxom.sourceforge.net/" \
   --inheritance grouped \
   --css white \
   -v \
   Pyblosxom
</pre>

  <li>make sure the manual builds correctly (run <code>buildhtml</code> in the docs directory)
</ul>
<p>
  Now the instructions:
</p>
<ol>
  <li>change VERSION in pyblosxom/Pyblosxom/pyblosxom.py to something like
      this: <code>"1.4"</code>
  <li>change VERSION_DATE in pyblosxom/Pyblosxom/pyblosxom.py to something
      like: <code>VERSION + " 7/2/2007" (m/d/yyyy)</code>
  <li>check in all changes
  <li>tag the release
<pre>
svn cp https://pyblosxom.svn.sourceforge.net/svnroot/pyblosxom/branches/PYBLOSXOM_1_4 \
       https://pyblosxom.svn.sourceforge.net/svnroot/pyblosxom/tags/pyblosxom_1.4.3/
</pre>
  <li>run:
<pre>
python setup.py sdist
</pre>
  <li>use ReleaseForge to create the new release with the resulting .tar.gz
  <ol>
    <li>launch releaseforge
    <li>log in
    <li>select "pyblosxom" from the projects list
    <li>select "pyblosxom" from the packages list
    <li>press the "create new release" button
    <ul>
      <li>Release name: 1.4
      <li>Release notes: specify what the release is about
      <li>ChangeLog: (anything in the CHANGELOG for that version)
    </ul>
    <li>press the "next" button
    <ul>
      <li>press the "Add Files" button
      <li>choose pyblosxom-1.4.tar.gz file
      <li>processor: platform-independent
      <li>file type: source .gz
    </ul>
    <li>press the "next" button
    <li>press the "submit" button
  </ol>
  <li>send an announcement email to <code>pyblosxom-announce at lists dot sourceforge dot net</code>
  <li>write up a blog entry for the web-site in /releases
</ol>
